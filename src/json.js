// Generated by BUCKLESCRIPT VERSION 3.1.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var isNull = function (v){return v === null;};

var mapObj = function (obj,fn){var ret = [];
   for (var idx in obj) {
     var v = fn(obj[idx]);
     ret.push([idx, v]);
   }
   return ret;};

var makeObj = function (a){var ret = {};
  for (var idx in a) {
    var data = a[idx];
    ret[data[0]] = data[1];
  }
  return ret;};

function json_of_value(v) {
  var match = typeof(v);
  switch (match) {
    case "boolean" : 
        return /* `Bool */[
                737456202,
                v
              ];
    case "number" : 
        return /* `Number */[
                -703661335,
                v
              ];
    case "object" : 
        if (Array.isArray(v)) {
          return /* `Array */[
                  951901561,
                  $$Array.map(json_of_value, v)
                ];
        } else if (isNull(v)) {
          return /* Null */870828711;
        } else {
          return /* `Object */[
                  -908856609,
                  $$Array.to_list(mapObj(v, json_of_value))
                ];
        }
    case "string" : 
        return /* `String */[
                -976970511,
                v
              ];
    default:
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "json.ml",
              53,
              11
            ]
          ];
  }
}

function value_of_json(param) {
  if (typeof param === "number") {
    return null;
  } else if (param[0] !== -908856609) {
    return param[1];
  } else {
    var v = List.map((function (param) {
            return /* tuple */[
                    param[0],
                    value_of_json(param[1])
                  ];
          }), param[1]);
    return makeObj($$Array.of_list(v));
  }
}

function parse(s) {
  return json_of_value(JSON.parse(s));
}

function stringify(v) {
  return JSON.stringify(value_of_json(v));
}

function from_js(v) {
  var match = json_of_value(v);
  if (typeof match === "number") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "json.ml",
            76,
            11
          ]
        ];
  } else if (match[0] !== -908856609) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "json.ml",
            76,
            11
          ]
        ];
  } else {
    return match[1];
  }
}

function to_js(l) {
  return value_of_json(/* `Object */[
              -908856609,
              l
            ]);
}

exports.parse = parse;
exports.stringify = stringify;
exports.from_js = from_js;
exports.to_js = to_js;
/* No side effect */
